from header import *

# script_troop_can_use_item
	# TAGS: Custom Commander(CC)
	# Can a troop qualify to use this item?
	# INPUT: troop, item, item modifiers	
	# Returns 1 = yes, 0 = no.
troop_can_use_item = (
	"troop_can_use_item",
		[
		(store_script_param, ":troop", 1),
		(store_script_param, ":item", 2),
		(store_script_param, ":item_modifier", 3),
		
		(item_get_type, ":type", ":item"),
		(try_begin),
			(eq, ":type", itp_type_book),
			(item_get_slot, ":difficulty", ":item", slot_item_intelligence_requirement),
		(else_try),
			(item_get_slot, ":difficulty", ":item", slot_item_difficulty),
		(try_end),
		
		(try_begin),
			(eq, ":difficulty", 0), # don't apply imod modifiers if item has no requirement
		(else_try),
			(eq, ":item_modifier", imod_stubborn),
			(val_add, ":difficulty", 1),
		(else_try),
			(eq, ":item_modifier", imod_timid),
			(val_sub, ":difficulty", 1),
		(else_try),
			(eq, ":item_modifier", imod_heavy),
			(neq, ":type", itp_type_horse), #heavy horses don't increase difficulty
			(val_add, ":difficulty", 1),
		(else_try),
			(eq, ":item_modifier", imod_strong),
			(val_add, ":difficulty", 2),
		(else_try),
			(eq, ":item_modifier", imod_masterwork),
			(val_add, ":difficulty", 4),
		(try_end),
		
		(try_begin),
			(eq, ":type", itp_type_horse),
			(store_skill_level, ":skill", skl_riding, ":troop"),
		(else_try),
			(this_or_next|eq, ":type", itp_type_crossbow),
			(this_or_next|eq, ":type", itp_type_one_handed_wpn),
			(this_or_next|eq, ":type", itp_type_two_handed_wpn),
			(this_or_next|eq, ":type", itp_type_polearm),
			(this_or_next|eq, ":type", itp_type_head_armor),
			(this_or_next|eq, ":type", itp_type_body_armor),
			(this_or_next|eq, ":type", itp_type_foot_armor),
			(eq, ":type", itp_type_hand_armor),
			(store_attribute_level, ":skill", ":troop", ca_strength),
		(else_try),
			(eq, ":type", itp_type_shield),
			(store_skill_level, ":skill", skl_shield, ":troop"),
		(else_try),
			(eq, ":type", itp_type_bow),
			(store_skill_level, ":skill", skl_power_draw, ":troop"),
		(else_try),
			(eq, ":type", itp_type_thrown),
			(store_skill_level, ":skill", skl_power_throw, ":troop"),
		(else_try),
			(eq, ":type", itp_type_book),
			(store_attribute_level, ":skill", ":troop", ca_intelligence),
		(try_end),
		
		(try_begin),
			(this_or_next|lt, ":skill", ":difficulty"),
			(this_or_next|is_between, ":item", reference_books_begin, reference_books_end),
			(eq, ":item_modifier", imod_lame),
			(assign, reg0, 0),
		(else_try),
			(troop_slot_eq, ":troop", slot_upgrade_horse, 1),
			(item_slot_eq, ":item", slot_item_cant_on_horseback, 1),
			(assign, reg0, 0),
		(else_try),
			(assign, reg0, 1),
		(try_end),
	])

#script_get_item_value_with_imod
	# TAGS: Custom Commander(CC)
	#INPUT: item ID, item modifier
	#OUTPUT: item value
get_item_value_with_imod = (
	"get_item_value_with_imod",
		[# returns the sell price based on the item's money value and its imod
		(store_script_param, ":item", 1),
		(store_script_param, ":imod", 2),
		
		(store_item_value, ":score", ":item"),
		(item_get_slot, ":imod_multiplier", ":imod", slot_item_modifier_multiplier),
		(val_mul, ":score", ":imod_multiplier"),
		(assign, reg0, ":score"),
	])
	
	#script_get_item_score_with_imod
	#INPUT: item ID, item modifier
	#OUTPUT	: item with imod score	
get_item_score_with_imod = (
	"get_item_score_with_imod",
		[
		(store_script_param, ":item", 1),
		(store_script_param, ":imod", 2),
		
		(item_get_type, ":type", ":item"),
		(try_begin),
			(eq, ":type", itp_type_book),
			(item_get_slot, ":i_score", ":item", slot_item_intelligence_requirement),
		(else_try),
			(eq, ":type", itp_type_horse),
			(item_get_slot, ":horse_speed", ":item", slot_item_horse_speed),
			(item_get_slot, ":horse_armor", ":item", slot_item_horse_armor),
			(item_get_slot, ":horse_charge", ":item", slot_item_horse_charge),
			
			(try_begin),
			(eq, ":imod", imod_swaybacked),
			(val_add, ":horse_speed", -2),
			(else_try),
			(eq, ":imod", imod_lame),
			(val_add, ":horse_speed", -5),
			(else_try),
			(eq, ":imod", imod_heavy),
			(val_add, ":horse_armor", 3),
			(val_add, ":horse_charge", 4),
			(else_try),
			(eq, ":imod", imod_spirited),
			(val_add, ":horse_speed", 1),
			(val_add, ":horse_armor", 1),
			(val_add, ":horse_charge", 1),
			(else_try),
			(eq, ":imod", imod_champion),
			(val_add, ":horse_speed", 2),
			(val_add, ":horse_armor", 2),
			(val_add, ":horse_charge", 2),
			(try_end),
			
			(store_mul, ":i_score", ":horse_speed", ":horse_armor"),
			(val_mul, ":i_score", ":horse_charge"),
		(else_try),
			(eq, ":type", itp_type_shield),
			(item_get_slot, ":shield_size", ":item", slot_item_length),
			(item_get_slot, ":shield_armor", ":item", slot_item_body_armor),
			(item_get_slot, ":shield_speed", ":item", slot_item_speed),
			
			(try_begin),
			(eq, ":imod", imod_cracked),
			(val_add, ":shield_armor", -4),
			(else_try),
			(eq, ":imod", imod_battered),
			(val_add, ":shield_armor", -2),
			(else_try),
			(eq, ":imod", imod_thick),
			(val_add, ":shield_armor", 2),
			(else_try),
			(eq, ":imod", imod_reinforced),
			(val_add, ":shield_armor", 4),
			(try_end),
			
			(val_add, ":shield_armor", 5),
			(store_mul, ":i_score", ":shield_armor", ":shield_size"),
			(val_mul, ":i_score", ":shield_speed"),
		(else_try),
			(this_or_next|eq, ":type", itp_type_head_armor),
			(this_or_next|eq, ":type", itp_type_body_armor),
			(this_or_next|eq, ":type", itp_type_foot_armor),
			(eq, ":type", itp_type_hand_armor),
			(item_get_slot, ":head_armor", ":item", slot_item_head_armor),
			(item_get_slot, ":body_armor", ":item", slot_item_body_armor),
			(item_get_slot, ":leg_armor", ":item", slot_item_leg_armor),
			(store_add, ":i_score", ":head_armor", ":body_armor"),
			(val_add, ":i_score", ":leg_armor"),
			
			(assign, ":imod_effect_mul", 0),
			(try_begin),
			(gt, ":head_armor", 0),
			(val_add, ":imod_effect_mul", 1),
			(try_end),
			(try_begin),
			(gt, ":body_armor", 0),
			(val_add, ":imod_effect_mul", 1),
			(try_end),
			(try_begin),
			(gt, ":leg_armor", 0),
			(val_add, ":imod_effect_mul", 1),
			(try_end),
			
			(try_begin),
			(eq, ":imod", imod_plain),
			(assign, ":imod_effect", 0),
			(else_try),
			(eq, ":imod", imod_cracked),
			(assign, ":imod_effect", -4),
			(else_try),
			(eq, ":imod", imod_rusty),
			(assign, ":imod_effect", -3),
			(else_try),
			(eq, ":imod", imod_battered),
			(assign, ":imod_effect", -2),
			(else_try),
			(eq, ":imod", imod_crude),
			(assign, ":imod_effect", -1),
			(else_try),
			(eq, ":imod", imod_tattered),
			(assign, ":imod_effect", -3),
			(else_try),
			(eq, ":imod", imod_ragged),
			(assign, ":imod_effect", -2),
			(else_try),
			(eq, ":imod", imod_sturdy),
			(assign, ":imod_effect", 1),
			(else_try),
			(eq, ":imod", imod_thick),
			(assign, ":imod_effect", 2),
			(else_try),
			(eq, ":imod", imod_hardened),
			(assign, ":imod_effect", 3),
			(else_try),
			(eq, ":imod", imod_reinforced),
			(assign, ":imod_effect", 4),
			(else_try),
			(eq, ":imod", imod_lordly),
			(assign, ":imod_effect", 6),
			(try_end),
			
			(val_mul, ":imod_effect", ":imod_effect_mul"),
			(val_add, ":i_score", ":imod_effect"),
		(else_try),
			(this_or_next|eq, ":type", itp_type_one_handed_wpn),
			(this_or_next|eq, ":type", itp_type_two_handed_wpn),
			(this_or_next|eq, ":type", itp_type_bow),
			(this_or_next|eq, ":type", itp_type_crossbow),
			(this_or_next|eq, ":type", itp_type_pistol),
			(this_or_next|eq, ":type", itp_type_musket),
			(eq, ":type", itp_type_polearm),
			(item_get_slot, ":item_speed", ":item", slot_item_speed),
			(item_get_slot, ":item_length", ":item", slot_item_length),
			(item_get_slot, ":swing_damage", ":item", slot_item_swing_damage),
			(item_get_slot, ":thrust_damage", ":item", slot_item_thrust_damage),
			(val_mod, ":swing_damage", 256),
			(val_mod, ":thrust_damage", 256),
			(assign, ":item_damage", ":swing_damage"),
			(val_max, ":item_damage", ":thrust_damage"),
			
			(try_begin),
			(eq, ":imod", imod_cracked),
			(val_add, ":item_damage", -5),
			(else_try),
			(eq, ":imod", imod_rusty),
			(val_add, ":item_damage", -3),
			(else_try),
			(eq, ":imod", imod_bent),
			(val_add, ":item_damage", -3),
			(val_add, ":item_speed", -3),
			(else_try),
			(eq, ":imod", imod_chipped),
			(val_add, ":item_damage", -1),
			(else_try),
			(eq, ":imod", imod_balanced),
			(val_add, ":item_damage", 3),
			(val_add, ":item_speed", 3),
			(else_try),
			(eq, ":imod", imod_tempered),
			(val_add, ":item_damage", 4),
			(else_try),
			(eq, ":imod", imod_masterwork),
			(val_add, ":item_damage", 5),
			(val_add, ":item_speed", 1),
			(else_try),
			(eq, ":imod", imod_heavy),
			(val_add, ":item_damage", 2),
			(val_add, ":item_speed", -2),
			(else_try),
			(eq, ":imod", imod_strong),
			(val_add, ":item_damage", 3),
			(val_add, ":item_speed", -3),
			(try_end),
			
			(try_begin),
			(this_or_next|eq, ":type", itp_type_bow),
			(this_or_next|eq, ":type", itp_type_crossbow),
			(this_or_next|eq, ":type", itp_type_pistol),
			(eq, ":type", itp_type_musket),
			(store_mul, ":i_score", ":item_damage", ":item_speed"),
			(else_try),
			(this_or_next|eq, ":type", itp_type_one_handed_wpn),
			(this_or_next|eq, ":type", itp_type_two_handed_wpn),
			(eq, ":type", itp_type_polearm),
			(store_mul, ":i_score", ":item_damage", ":item_speed"),
			(val_mul, ":i_score", ":item_length"),
			(try_end),
		(else_try),
			(this_or_next|eq, ":type", itp_type_arrows),
			(this_or_next|eq, ":type", itp_type_bolts),
			(this_or_next|eq, ":type", itp_type_bullets),
			(eq, ":type", itp_type_thrown),
			(item_get_slot, ":thrust_damage", ":item", slot_item_thrust_damage),
			(val_mod, ":thrust_damage", 256),
			(assign, ":i_score", ":thrust_damage"),
			(val_add, ":i_score", 3), # +3 to make sure damage > 0
			
			(try_begin),
			(eq, ":imod", imod_plain),
			(val_mul, ":i_score", 2),
			(else_try),
			(eq, ":imod", imod_large_bag),
			(val_mul, ":i_score", 2),
			(val_add, ":i_score", 1),
			(else_try),
			(eq, ":imod", imod_bent),
			(val_sub, ":i_score", 3),
			(val_mul, ":i_score", 2),
			(else_try),
			(eq, ":imod", imod_heavy),
			(val_add, ":i_score", 2),
			(val_mul, ":i_score", 2),
			(else_try),
			(eq, ":imod", imod_balanced),
			(val_add, ":i_score", 3),
			(val_mul, ":i_score", 2),
			(try_end),
		(try_end),
		
		(assign, reg0, ":i_score"),
	])
	################################################################
	##### Custom Commander(CC)
	################################################################
	

	#script_print_wpn_upgrades_to_s0
	# TAGS: Custom Commander(CC)
	# Used in conversations
	# INPUT: troop
	# OUTPUT: s0
print_wpn_upgrades_to_s0 = (
	"print_wpn_upgrades_to_s0",
		[
		(store_script_param_1, ":troop"),
		
		## CC
		(troop_get_slot,":upgrade_wpn_set_sel", ":troop", slot_upgrade_wpn_set_sel),
		(store_mul, ":offset", ":upgrade_wpn_set_sel", offset_of_two_sets_slot),
		(store_add, ":slot_upgrade_wpn_0", slot_upgrade_wpn_0, ":offset"),
		(store_add, ":slot_upgrade_wpn_1", slot_upgrade_wpn_1, ":offset"),
		(store_add, ":slot_upgrade_wpn_2", slot_upgrade_wpn_2, ":offset"),
		(store_add, ":slot_upgrade_wpn_3", slot_upgrade_wpn_3, ":offset"),
		## CC
		
		(str_store_string, s0, "str_empty_string"),
		(troop_get_slot, ":upg", ":troop", ":slot_upgrade_wpn_0"),
		(troop_get_inventory_slot, ":item", ":troop", 0),
		(try_begin),
			(ge, ":item", 0),
			(str_store_item_name, s10, ":item"),
		(else_try),
			(str_store_string, s10, "str_none"),
		(try_end),
		(val_add, ":upg", "str_hero_wpn_slot_none"),
		(str_store_string, s1, ":upg"),
		(str_store_string, s0, "@{s0}^{s1}"),
		(troop_get_slot, ":upg", ":troop", ":slot_upgrade_wpn_1"),
		(troop_get_inventory_slot, ":item", ":troop", 1),
		(try_begin),
			(ge, ":item", 0),
			(str_store_item_name, s10, ":item"),
		(else_try),
			(str_store_string, s10, "str_none"),
		(try_end),
		(val_add, ":upg", "str_hero_wpn_slot_none"),
		(str_store_string, s1, ":upg"),
		(str_store_string, s0, "@{s0}^{s1}"),
		(troop_get_slot, ":upg", ":troop", ":slot_upgrade_wpn_2"),
		(troop_get_inventory_slot, ":item", ":troop", 2),
		(try_begin),
			(ge, ":item", 0),
			(str_store_item_name, s10, ":item"),
		(else_try),
			(str_store_string, s10, "str_none"),
		(try_end),
		(val_add, ":upg", "str_hero_wpn_slot_none"),
		(str_store_string, s1, ":upg"),
		(str_store_string, s0, "@{s0}^{s1}"),
		(troop_get_slot, ":upg", ":troop", ":slot_upgrade_wpn_3"),
		(troop_get_inventory_slot, ":item", ":troop", 3),
		(try_begin),
			(ge, ":item", 0),
			(str_store_item_name, s10, ":item"),
		(else_try),
			(str_store_string, s10, "str_none"),
		(try_end),
		(val_add, ":upg", "str_hero_wpn_slot_none"),
		(str_store_string, s1, ":upg"),
		(str_store_string, s0, "@{s0}^{s1}"),
	])
	
	#script_scan_for_best_item_of_type
	# Search for the most expensive item of a specified type
	# INPUT	: troop, item_type, troop_using
	# OUTPUT : best_slot	
scan_for_best_item_of_type = (
	"scan_for_best_item_of_type",
		[
		(store_script_param, ":troop",1),
		(store_script_param, ":item_type",2),
		(store_script_param, ":troop_using", 3),
		
		(assign, ":best_slot", -1),
		(assign, ":best_value", -1),
		# iterate through the list of items
		(troop_get_inventory_capacity, ":inv_cap", ":troop"),
		(try_for_range, ":i_slot", 0, ":inv_cap"),
			(troop_get_inventory_slot, ":item", ":troop", ":i_slot"),
			(ge, ":item", 0),
			(troop_get_inventory_slot_modifier, ":imod", ":troop", ":i_slot"),
			#### Autoloot improved by rubik begin
			(try_begin),
			(item_slot_eq, ":item", slot_item_two_hand_one_hand, 1),
			(assign, ":this_item_type", itp_type_one_handed_wpn),
			(else_try),
			(item_get_type, ":this_item_type", ":item"),
			(try_end),
			#### Autoloot improved by rubik end
			(eq, ":this_item_type", ":item_type"), # it's one of the kind we're looking for
			(call_script, "script_troop_can_use_item", ":troop_using", ":item", ":imod"),
			(eq, reg0, 1), # can use
			(call_script, "script_get_item_score_with_imod", ":item", ":imod"),
			(gt, reg0, ":best_value"), # best one we've seen yet
			(assign, ":best_slot", ":i_slot"),
			(assign, ":best_value", reg0),
		(try_end),
		
		# return the slot of the best one
		(assign, reg0, ":best_slot"),
	])

	# script_get_current_item_for_autoloot
	# INPUT	: wpn_set, slot_no
	# OUTPUT : s10 item name
get_current_item_for_autoloot = (
	"get_current_item_for_autoloot",
		[
		(store_script_param_1, ":wpn_set"),
		(store_script_param_2, ":slot_no"),
		
		(try_begin),
			(eq, ":wpn_set", 0),
			(assign, ":dest_slot", ":slot_no"),
			(troop_get_inventory_slot, ":item", "$temp", ":dest_slot"),
		(else_try),
			(store_sub, ":dest_slot", "$temp", companions_begin),
			(val_mul, ":dest_slot", 4),
			(val_add, ":dest_slot", 10),
			(val_add, ":dest_slot", ":slot_no"),
			(troop_get_inventory_slot, ":item", "trp_merchants_end", ":dest_slot"),
		(try_end),
		(try_begin),
			(ge, ":item", 0),
			(str_store_item_name, s10, ":item"),
		(else_try),
			(str_store_string, s10, "str_none"),
		(try_end),
	])

