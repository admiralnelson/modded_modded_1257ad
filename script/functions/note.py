from header import *

#script_game_get_quest_note
	# This script is called from the game engine when the notes of a quest is needed.
	# INPUT: arg1 = quest_no, arg2 = note_index
	# OUTPUT: s0 = note
game_get_quest_note =	(
	"game_get_quest_note",
		[
			##      (store_script_param_1, ":quest_no"),
			##      (store_script_param_2, ":note_index"),
			(set_trigger_result, 0), # set it to 1 if this script is wanted to be used rather than static notes
	])

#script_game_get_info_page_note
	# This script is called from the game engine when the notes of a info_page is needed.
	# INPUT: arg1 = info_page_no, arg2 = note_index
	# OUTPUT: s0 = note
game_get_info_page_note =	(
	"game_get_info_page_note",
		[
			##      (store_script_param_1, ":info_page_no"),
			##      (store_script_param_2, ":note_index"),
			(set_trigger_result, 0), # set it to 1 if this script is wanted to be used rather than static notes
	])

#script_game_get_troop_note
# This script is called from the game engine when the notes of a troop is needed.
# INPUT: arg1 = troop_no, arg2 = note_index
# OUTPUT: s0 = note
game_get_troop_note =	(
	"game_get_troop_note",
		[
			(store_script_param_1, ":troop_no"),
			(store_script_param_2, ":note_index"),
			(set_trigger_result, 0),
			
			(str_store_troop_name, s54, ":troop_no"),
			(try_begin),
				(eq, ":troop_no", "trp_player"),
				(this_or_next|eq, "$player_has_homage", 1),
				(eq, "$players_kingdom", "fac_player_supporters_faction"),
				(assign, ":troop_faction", "$players_kingdom"),
			(else_try),
				(store_troop_faction, ":troop_faction", ":troop_no"),
			(try_end),
			(str_clear, s49),
			
			#Family notes
			(try_begin),
				(this_or_next|is_between, ":troop_no", lords_begin, kingdom_ladies_end),
				(eq, ":troop_no", "trp_player"),
				(neg|is_between, ":troop_no", pretenders_begin, pretenders_end),
				(assign, ":num_relations", 0),
				
				(try_begin),
					(call_script, "script_troop_get_family_relation_to_troop", "trp_player", ":troop_no"),
					(gt, reg0, 0),
					(val_add, ":num_relations", 1),
				(try_end),
				(try_for_range, ":aristocrat", lords_begin, kingdom_ladies_end),
					(call_script, "script_troop_get_family_relation_to_troop", ":aristocrat", ":troop_no"),
					(gt, reg0, 0),
					(val_add, ":num_relations", 1),
				(try_end),
				(try_begin),
					(gt, ":num_relations", 0),
					(try_begin),
						(eq, ":troop_no", "trp_player"),
						(str_store_string, s49, "str__family_"),
					(else_try),
						(troop_get_slot, reg1, ":troop_no", slot_troop_age),
						(str_store_string, s49, "str__age_reg1_family_"),
					(try_end),
					(try_begin),
						(call_script, "script_troop_get_family_relation_to_troop", "trp_player", ":troop_no"),
						(gt, reg0, 0),
						(str_store_troop_name_link, s12, "trp_player"),
						(val_sub, ":num_relations", 1),
						(try_begin),
							(eq, ":num_relations", 0),
							(str_store_string, s49, "str_s49_s12_s11_end"),
						(else_try),
							(str_store_string, s49, "str_s49_s12_s11"),
						(try_end),
					(try_end),
					(try_for_range, ":aristocrat", lords_begin, kingdom_ladies_end),
						(call_script, "script_troop_get_family_relation_to_troop", ":aristocrat", ":troop_no"),
						(gt, reg0, 0),
						(try_begin),
							(neg|is_between, ":aristocrat", kingdom_ladies_begin, kingdom_ladies_end),
							(eq, "$cheat_mode", 1),
							(str_store_troop_name_link, s12, ":aristocrat"),
							(call_script, "script_troop_get_relation_with_troop", ":aristocrat", ":troop_no"),
							(str_store_string, s49, "str_s49_s12_s11_rel_reg0"),
						(else_try),
							(str_store_troop_name_link, s12, ":aristocrat"),
							(val_sub, ":num_relations", 1),
							(try_begin),
								(eq, ":num_relations", 0),
								(str_store_string, s49, "str_s49_s12_s11_end"),
							(else_try),
								(str_store_string, s49, "str_s49_s12_s11"),
							(try_end),
						(try_end),
					(try_end),
				(try_end),
			(try_end),
			
			(try_begin),
				(neq, ":troop_no", "trp_player"),
				(neg|is_between, ":troop_faction", kingdoms_begin, kingdoms_end),
				(neg|is_between, ":troop_no", companions_begin, companions_end),
				(neg|is_between, ":troop_no", pretenders_begin, pretenders_end),
				
				(try_begin),
					(eq, ":note_index", 0),
					(str_store_string, s0, "str_s54_has_left_the_realm"),
					(set_trigger_result, 1),
				(else_try),
					(str_clear, s0),
					(this_or_next|eq, ":note_index", 1),
					(eq, ":note_index", 2),
					(set_trigger_result, 1),
				(try_end),
				
			(else_try),
				(is_between, ":troop_no", companions_begin, companions_end),
				(neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
				(eq, ":note_index", 0),
				(set_trigger_result, 1),
				(str_clear, s0),
				(assign, ":companion", ":troop_no"),
				(str_store_troop_name, s4, ":companion"),
				(try_begin),
					(troop_get_slot, ":days_left", ":companion", slot_troop_days_on_mission),
					
					(this_or_next|main_party_has_troop, ":companion"),
					(this_or_next|troop_slot_ge, ":companion", slot_troop_current_mission, 1),
					(eq, "$g_player_minister", ":companion"),
					
					(try_begin),
						(troop_slot_eq, ":companion", slot_troop_current_mission, npc_mission_kingsupport),
						(str_store_string, s8, "str_gathering_support"),
						(try_begin),
							(eq, ":days_left", 1),
							(str_store_string, s5, "str_expected_back_imminently"),
						(else_try),
							(assign, reg3, ":days_left"),
							(str_store_string, s5, "str_expected_back_in_approximately_reg3_days"),
						(try_end),
					(else_try),
						(troop_slot_eq, ":companion", slot_troop_current_mission, npc_mission_gather_intel),
						(troop_get_slot, ":town_with_contacts", ":companion", slot_troop_town_with_contacts),
						(str_store_party_name, s11, ":town_with_contacts"),
						
						(str_store_string, s8, "str_gathering_intelligence"),
						(try_begin),
							(eq, ":days_left", 1),
							(str_store_string, s5, "str_expected_back_imminently"),
						(else_try),
							(assign, reg3, ":days_left"),
							(str_store_string, s5, "str_expected_back_in_approximately_reg3_days"),
						(try_end),
					(else_try),
						
						(troop_slot_ge, ":companion", slot_troop_current_mission, npc_mission_peace_request),
						(neg|troop_slot_ge, ":companion", slot_troop_current_mission, 8),
						
						(troop_get_slot, ":faction", ":companion", slot_troop_mission_object),
						(str_store_faction_name, s9, ":faction"),
						(str_store_string, s8, "str_diplomatic_embassy_to_s9"),
						(try_begin),
							(eq, ":days_left", 1),
							(str_store_string, s5, "str_expected_back_imminently"),
						(else_try),
							(assign, reg3, ":days_left"),
							(str_store_string, s5, "str_expected_back_in_approximately_reg3_days"),
						(try_end),
					(else_try),
						(eq, ":companion", "$g_player_minister"),
						(str_store_string, s8, "str_serving_as_minister"),
						(str_store_party_name, s9, "$g_player_court"),
						(is_between, "$g_player_court", centers_begin, centers_end),
						(str_store_string, s5, "str_in_your_court_at_s9"),
					(else_try),
						(eq, ":companion", "$g_player_minister"),
						(str_store_string, s8, "str_serving_as_minister"),
						(str_store_string, s5, "str_awaiting_the_capture_of_a_fortress_which_can_serve_as_your_court"),
					(else_try),
						(main_party_has_troop, ":companion"),
						(str_store_string, s8, "str_under_arms"),
						(str_store_string, s5, "str_in_your_party"),
					(try_end),
					
					(str_store_string, s0, "str_s4_s8_s5"),
					
				(else_try),
					(str_store_string, s0, "str_whereabouts_unknown"),
				(try_end),
				
				
			(else_try),
				(is_between, ":troop_no", pretenders_begin, pretenders_end),
				(neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
				(neq, ":troop_no", "$supported_pretender"),
				
				
				(troop_get_slot, ":orig_faction", ":troop_no", slot_troop_original_faction),
				(try_begin),
					(faction_slot_eq, ":orig_faction", slot_faction_state, sfs_active),
					(faction_slot_eq, ":orig_faction", slot_faction_has_rebellion_chance, 1),
					(try_begin),
						(eq, ":note_index", 0),
						(str_store_faction_name_link, s56, ":orig_faction"),
						(str_store_string, s0, "@{s54} is a claimant to the throne of {s56}.", 0),
						(set_trigger_result, 1),
					(try_end),
				(else_try),
					(try_begin),
						(str_clear, s0),
						(this_or_next|eq, ":note_index", 0),
						(this_or_next|eq, ":note_index", 1),
						(eq, ":note_index", 2),
						(set_trigger_result, 1),
					(try_end),
				(try_end),
				
			(else_try),
				(try_begin),
					(eq, ":note_index", 0),
					(faction_get_slot, ":faction_leader", ":troop_faction", slot_faction_leader),
					(str_store_troop_name_link, s55, ":faction_leader"),
					(str_store_faction_name_link, s56, ":troop_faction"),
					(assign, ":troop_is_player_faction", 0),
					(assign, ":troop_is_faction_leader", 0),
					(try_begin),
						(eq, ":troop_faction", "fac_player_faction"),
						(assign, ":troop_is_player_faction", 1),
					(else_try),
						(eq, ":faction_leader", ":troop_no"),
						(assign, ":troop_is_faction_leader", 1),
					(try_end),
					(assign, ":num_centers", 0),
					(str_store_string, s58, "@nowhere"),
					(try_for_range_backwards, ":cur_center", centers_begin, centers_end),
						(party_slot_eq, ":cur_center", slot_town_lord, ":troop_no"),
						(try_begin),
							(eq, ":num_centers", 0),
							(str_store_party_name_link, s58, ":cur_center"),
						(else_try),
							(eq, ":num_centers", 1),
							(str_store_party_name_link, s57, ":cur_center"),
							(str_store_string, s58, "@{s57} and {s58}"),
						(else_try),
							(str_store_party_name_link, s57, ":cur_center"),
							(str_store_string, s58, "@{!}{s57}, {s58}"),
						(try_end),
						(val_add, ":num_centers", 1),
					(try_end),
					(troop_get_type, reg3, ":troop_no"),
					(troop_get_slot, reg5, ":troop_no", slot_troop_renown),
					(troop_get_slot, reg15, ":troop_no", slot_troop_controversy),
					
					(str_clear, s59),
					(try_begin),
						(call_script, "script_troop_get_player_relation", ":troop_no"),
						(assign, ":relation", reg0),
						(store_add, ":normalized_relation", ":relation", 100),
						(val_add, ":normalized_relation", 5),
						(store_div, ":str_offset", ":normalized_relation", 10),
						(val_clamp, ":str_offset", 0, 20),
						(store_add, ":str_id", "str_relation_mnus_100_ns",  ":str_offset"),
						(neq, ":str_id", "str_relation_plus_0_ns"),
						(str_store_string, s60, "@{reg3?She:He}"),
						(str_store_string, s59, ":str_id"),
						(str_store_string, s59, "@{!}^{s59}"),
					(try_end),
					#lord recruitment changes begin
					#This sends a bunch of political information to s47.
					
					#refresh registers
					(assign, reg9, ":num_centers"),
					(troop_get_type, reg3, ":troop_no"),
					(troop_get_slot, reg5, ":troop_no", slot_troop_renown),
					(assign, reg4, ":troop_is_faction_leader"),
					(assign, reg6, ":troop_is_player_faction"),
					
					(troop_get_slot, reg17, ":troop_no", slot_troop_wealth), #DEBUGS
					(str_store_string, s0, "str_lord_info_string", 0),
					#lord recruitment changes end
					(add_troop_note_tableau_mesh, ":troop_no", "tableau_troop_note_mesh"),
					(set_trigger_result, 1),
				(try_end),
			(try_end),
	])

#script_game_get_center_note
	# This script is called from the game engine when the notes of a center is needed.
	# INPUT: arg1 = center_no, arg2 = note_index
	# OUTPUT: s0 = note
game_get_center_note =	(
	"game_get_center_note",
		[
			(store_script_param_1, ":center_no"),
			(store_script_param_2, ":note_index"),
			
			(set_trigger_result, 0),
			(try_begin),
				(eq, ":note_index", 0),
				(party_get_slot, ":lord_troop", ":center_no", slot_town_lord),
				(try_begin),
					(ge, ":lord_troop", 0),
					(store_troop_faction, ":lord_faction", ":lord_troop"),
					(str_store_troop_name_link, s1, ":lord_troop"),
					(try_begin),
						(eq, ":lord_troop", "trp_player"),
						(gt, "$players_kingdom", 0),
						(str_store_faction_name_link, s2, "$players_kingdom"),
					(else_try),
						(str_store_faction_name_link, s2, ":lord_faction"),
					(try_end),
					(str_store_party_name, s50, ":center_no"),
					(try_begin),
						(party_slot_eq, ":center_no", slot_party_type, spt_town),
						(str_store_string, s51, "@The town of {s50}"),
					(else_try),
						(party_slot_eq, ":center_no", slot_party_type, spt_village),
						(party_get_slot, ":bound_center", ":center_no", slot_village_bound_center),
						(str_store_party_name_link, s52, ":bound_center"),
						(str_store_string, s51, "@The village of {s50} near {s52}"),
					(else_try),
						(str_store_string, s51, "@{!}{s50}"),
					(try_end),
					(str_store_string, s2, "@{s51} belongs to {s1} of {s2}.^"),
				(else_try),
					(str_clear, s2),
				(try_end),
				(try_begin),
					(is_between, ":center_no", villages_begin, villages_end),
				(else_try),
					(assign, ":num_villages", 0),
					(try_for_range_backwards, ":village_no", villages_begin, villages_end),
						(party_slot_eq, ":village_no", slot_village_bound_center, ":center_no"),
						(try_begin),
							(eq, ":num_villages", 0),
							(str_store_party_name_link, s8, ":village_no"),
						(else_try),
							(eq, ":num_villages", 1),
							(str_store_party_name_link, s7, ":village_no"),
							(str_store_string, s8, "@{s7} and {s8}"),
						(else_try),
							(str_store_party_name_link, s7, ":village_no"),
							(str_store_string, s8, "@{!}{s7}, {s8}"),
						(try_end),
						(val_add, ":num_villages", 1),
					(try_end),
					(try_begin),
						(eq, ":num_villages", 0),
						(str_store_string, s2, "@{s2}It has no villages.^"),
					(else_try),
						(store_sub, reg0, ":num_villages", 1),
						(str_store_string, s2, "@{s2}{reg0?Its villages are:Its village is} {s8}.^"),
					(try_end),
				(try_end),
				(call_script, "script_get_prosperity_text_to_s50", ":center_no"),
				(str_store_string, s0, "@{s2}Its prosperity is: {s50}", 0),
				(set_trigger_result, 1),
			(try_end),
	])

#script_game_get_faction_note
	# This script is called from the game engine when the notes of a faction is needed.
	# INPUT: arg1 = faction_no, arg2 = note_index
	# OUTPUT: s0 = note
game_get_faction_note =	(
	"game_get_faction_note",
		[
			(store_script_param_1, ":faction_no"),
			(store_script_param_2, ":note_index"),
			(set_trigger_result, 0),
			
			##      (try_begin),
			##        (eq, 2, 1),
			##        (str_store_faction_name, s14, ":faction_no"),
			##        (assign, reg4, "$temp"),
			##        (display_message, "str_updating_faction_notes_for_s14_temp_=_reg4"),
			##      (try_end),
			
			(try_begin),
				(is_between, ":faction_no", kingdoms_begin, kingdoms_end),
				(faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
				#conditions end
				(try_begin),
					(eq, ":note_index", 0),
					(faction_get_slot, ":faction_leader", ":faction_no", slot_faction_leader),
					(str_store_faction_name, s5, ":faction_no"),
					(str_store_troop_name_link, s6, ":faction_leader"),
					(assign, ":num_centers", 0),
					(str_store_string, s8, "@nowhere"),
					(try_for_range_backwards, ":cur_center", centers_begin, centers_end),
						(store_faction_of_party, ":center_faction", ":cur_center"),
						(eq, ":center_faction", ":faction_no"),
						(try_begin),
							(eq, ":num_centers", 0),
							(str_store_party_name_link, s8, ":cur_center"),
						(else_try),
							(eq, ":num_centers", 1),
							(str_store_party_name_link, s7, ":cur_center"),
							(str_store_string, s8, "@{s7} and {s8}"),
						(else_try),
							(str_store_party_name_link, s7, ":cur_center"),
							(str_store_string, s8, "@{!}{s7}, {s8}"),
						(try_end),
						(val_add, ":num_centers", 1),
					(try_end),
					(assign, ":num_members", 0),
					(str_store_string, s10, "@noone"),
					(try_for_range_backwards, ":loop_var", "trp_kingdom_heroes_including_player_begin", active_npcs_end),
						(assign, ":cur_troop", ":loop_var"),
						(try_begin),
							(eq, ":loop_var", "trp_kingdom_heroes_including_player_begin"),
							(assign, ":cur_troop", "trp_player"),
							(assign, ":troop_faction", "$players_kingdom"),
						(else_try),
							(store_troop_faction, ":troop_faction", ":cur_troop"),
						(try_end),
						(eq, ":troop_faction", ":faction_no"),
						(neq, ":cur_troop", ":faction_leader"),
						(troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
						(try_begin),
							(eq, ":num_members", 0),
							(str_store_troop_name_link, s10, ":cur_troop"),
						(else_try),
							(eq, ":num_members", 1),
							(str_store_troop_name_link, s9, ":cur_troop"),
							(str_store_string, s10, "@{s9} and {s10}"),
						(else_try),
							(str_store_troop_name_link, s9, ":cur_troop"),
							(str_store_string, s10, "@{!}{s9}, {s10}"),
						(try_end),
						(val_add, ":num_members", 1),
					(try_end),
					
					#wars
					(str_store_string, s12, "@noone"),
					#       (assign, ":num_enemies", 0),
					#       (try_for_range_backwards, ":cur_faction", kingdoms_begin, kingdoms_end),
					#         (faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
					#         (store_relation, ":cur_relation", ":cur_faction", ":faction_no"),
					#         (lt, ":cur_relation", 0),
					#         (try_begin),
					#           (eq, ":num_enemies", 0),
					#           (str_store_faction_name_link, s12, ":cur_faction"),
					#         (else_try),
					#           (eq, ":num_enemies", 1),
					#           (str_store_faction_name_link, s11, ":cur_faction"),
					#           (str_store_string, s12, "@the {s11} and the {s12}"),
					#         (else_try),
					#           (str_store_faction_name_link, s11, ":cur_faction"),
					#           (str_store_string, s12, "@the {s11}, the {s12}"),
					#         (try_end),
					#         (val_add, ":num_enemies", 1),
					#       (try_end),
					
					(str_store_string, s21, "str_foreign_relations__"),
					
					#other foreign relations
					(try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
						(faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
						(neq, ":faction_no", ":cur_faction"),
						(str_store_faction_name_link, s14, ":cur_faction"),
						
						(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", ":faction_no", ":cur_faction"),
						(assign, ":diplomatic_status", reg0),
						(assign, ":duration_of_status", reg1),
						
						(call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", ":cur_faction", ":faction_no"),
						(assign, ":reverse_diplomatic_status", reg0),
						#			(assign, ":reverse_diplomatic_duration", reg1),
						
						(try_begin),
							(eq, ":diplomatic_status", -2),
							(str_store_string, s21, "str_s21__the_s5_is_at_war_with_the_s14"),
							(store_add, ":slot_war_damage_inflicted", ":cur_faction", slot_faction_war_damage_inflicted_on_factions_begin),
							(val_sub, ":slot_war_damage_inflicted", kingdoms_begin),
							(faction_get_slot, ":war_damage_inflicted", ":faction_no", ":slot_war_damage_inflicted"),
							(store_mul, ":war_damage_inflicted_x_2", ":war_damage_inflicted", 2),
							
							(store_add, ":slot_war_damage_suffered", ":faction_no", slot_faction_war_damage_inflicted_on_factions_begin),
							(val_sub, ":slot_war_damage_suffered", kingdoms_begin),
							(faction_get_slot, ":war_damage_suffered", ":cur_faction", ":slot_war_damage_suffered"),
							(store_mul, ":war_damage_suffered_x_2", ":war_damage_suffered", 2),
							
							
							(assign, ":war_cause", 0),
							(assign, ":attacker", 0),
							(try_for_range, ":log_entry", 0, "$num_log_entries"),
								(troop_get_slot, ":type", "trp_log_array_entry_type", ":log_entry"),
								(is_between, ":type", logent_faction_declares_war_out_of_personal_enmity, logent_war_declaration_types_end),
								(troop_get_slot, ":actor", "trp_log_array_actor", ":log_entry"),
								(troop_get_slot, ":object", "trp_log_array_faction_object", ":log_entry"),
								
								(try_begin),
									(eq, ":actor", ":cur_faction"),
									(eq, ":object", ":faction_no"),
									(assign, ":war_cause", ":type"),
									(assign, ":attacker", ":actor"),
								(else_try),
									(eq, ":actor", ":faction_no"),
									(eq, ":object", ":cur_faction"),
									(assign, ":war_cause", ":type"),
									(assign, ":attacker", ":actor"),
								(try_end),
							(try_end),
							
							#bug fix! backing up s8 to somewhere else
							(str_store_string, s25, s8),
							(try_begin),
								(gt, ":war_cause", 0),
								(str_store_faction_name, s8, ":attacker"),
								(try_begin),
									(eq, ":war_cause", logent_faction_declares_war_out_of_personal_enmity),
									(str_store_string, s21, "str_s21_the_s8_declared_war_out_of_personal_enmity"),
									# rafi
								(else_try),
									(eq, ":war_cause", logent_faction_declares_war_due_to_religious_differences),
									(str_store_string, s21, "str_s21_the_s8_declared_war_due_to_religious_differences"),
									# rafi
								(else_try),
									(eq, ":war_cause", logent_faction_declares_war_to_respond_to_provocation),
									(str_store_string, s21, "str_s21_the_s8_declared_war_in_response_to_border_provocations"),
								(else_try),
									(eq, ":war_cause", logent_faction_declares_war_to_curb_power),
									(str_store_string, s21, "str_s21_the_s8_declared_war_to_curb_the_other_realms_power"),
								(else_try),
									(eq, ":war_cause", logent_faction_declares_war_to_regain_territory),
									(str_store_string, s21, "str_s21_the_s8_declared_war_to_regain_lost_territory"),
								(else_try),
									(eq, ":war_cause", logent_player_faction_declares_war),
									(neq, ":attacker", "fac_player_supporters_faction"),
									(str_store_string, s21, "str_s21_the_s8_declared_war_as_part_of_a_bid_to_conquer_all_calradia"),
								(try_end),
							(try_end),
							#bug fix! restoring the back up to s8
							(str_store_string, s8, s25),
							
							(try_begin),
								(gt, ":war_damage_inflicted", ":war_damage_suffered_x_2"),
								(str_store_string, s21, "str_s21_the_s5_has_had_the_upper_hand_in_the_fighting"),
							(else_try),
								(gt, ":war_damage_suffered", ":war_damage_inflicted_x_2"),
								(str_store_string, s21, "str_s21_the_s5_has_gotten_the_worst_of_the_fighting"),
							(else_try),
								(gt, ":war_damage_inflicted", 100),
								(gt, ":war_damage_inflicted", 100),
								(str_store_string, s21, "str_s21_the_fighting_has_gone_on_for_some_time_and_the_war_may_end_soon_with_a_truce"),
							(else_try),
								(str_store_string, s21, "str_s21_the_fighting_has_begun_relatively_recently_and_the_war_may_continue_for_some_time"),
							(try_end),
							(try_begin),
								(eq, "$cheat_mode", 1),
								(assign, reg4, ":war_damage_inflicted"),
								(assign, reg5, ":war_damage_suffered"),
								(str_store_string, s21, "str_s21_reg4reg5"),
							(try_end),
						(else_try),
							(eq, ":diplomatic_status", 1),
							(str_clear, s18),
							(try_begin),
								(neq, ":reverse_diplomatic_status", 1),
								(str_store_string, s18, "str__however_the_truce_is_no_longer_binding_on_the_s14"),
							(try_end),
							(assign, reg1, ":duration_of_status"),
							(str_store_string, s21, "str_s21__the_s5_is_bound_by_truce_not_to_attack_the_s14s18_the_truce_will_expire_in_reg1_days"),
						(else_try),
							(eq, ":diplomatic_status", -1),
							(str_store_string, s21, "str_s21__the_s5_has_recently_suffered_provocation_by_subjects_of_the_s14_and_there_is_a_risk_of_war"),
						(else_try),
							(eq, ":diplomatic_status", 0),
							(str_store_string, s21, "str_s21__the_s5_has_no_outstanding_issues_with_the_s14"),
						(try_end),
						(try_begin),
							(eq, ":reverse_diplomatic_status", -1),
							(str_store_string, s21, "str_s21_the_s14_was_recently_provoked_by_subjects_of_the_s5_and_there_is_a_risk_of_war_"),
						(try_end),
						(try_begin),
							(eq, "$cheat_mode", 1),
							(call_script, "script_npc_decision_checklist_peace_or_war", ":faction_no", ":cur_faction", -1),
							(str_store_string, s21, "@{!}DEBUG : {s21}.^CHEAT MODE ASSESSMENT: {s14}^"),
						(try_end),
					(try_end),
					# rafi - get religion
					(call_script, "script_raf_religion_to_s11", ":faction_no"),
					##(faction_get_slot, reg10, ":faction_no", slot_faction_pope_relation),
					# end rafi
					(str_store_string, s0, "str_the_s5_is_ruled_by_s6_it_occupies_s8_its_vassals_are_s10_its_religion_is_s11__s21", 0),
					(set_trigger_result, 1),
				(try_end),
			(else_try),
				(is_between, ":faction_no", kingdoms_begin, kingdoms_end),
				(faction_slot_eq, ":faction_no", slot_faction_state, sfs_defeated),
				(try_begin),
					(eq, ":note_index", 0),
					(str_store_faction_name, s5, ":faction_no"),
					(str_store_string, s0, "@{s5} has been defeated!", 0),
					(set_trigger_result, 1),
				(else_try),
					(eq, ":note_index", 1),
					(str_clear, s0),
					(set_trigger_result, 1),
				(try_end),
			(else_try),
				(try_begin),
					(this_or_next|eq, ":note_index", 0),
					(eq, ":note_index", 1),
					(str_clear, s0),
					(set_trigger_result, 1),
				(try_end),
			(try_end),
	])