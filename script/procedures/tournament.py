from header import *

	# script_fill_tournament_participants_troop
	# WARNING: heavily modified by 1257AD devs
	# Input: arg1 = center_no, arg2 = player_at_center
	# Output: none (fills trp_tournament_participants)
fill_tournament_participants_troop = (
	"fill_tournament_participants_troop",
		[(store_script_param, ":center_no", 1),
			(store_script_param, ":player_at_center", 2),
			(assign, ":cur_slot", 0),
			
			(try_begin),
				(eq, ":player_at_center", 1),
				(party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
				(try_for_range, ":stack_no", 0, ":num_stacks"),
					(party_stack_get_troop_id, ":cur_troop", "p_main_party", ":stack_no"),
					(troop_is_hero, ":cur_troop"),
					(neq, ":cur_troop", "trp_kidnapped_girl"),
					(troop_set_slot, "trp_tournament_participants", ":cur_slot", ":cur_troop"),
					(val_add, ":cur_slot", 1),
				(try_end),
			(try_end),
			
			(party_collect_attachments_to_party, ":center_no", "p_temp_party"),
			(party_get_num_companion_stacks, ":num_stacks", "p_temp_party"),
			(try_for_range, ":stack_no", 0, ":num_stacks"),
				(party_stack_get_troop_id, ":cur_troop", "p_temp_party", ":stack_no"),
				(troop_is_hero, ":cur_troop"),
				(troop_set_slot, "trp_tournament_participants", ":cur_slot", ":cur_troop"),
				(val_add, ":cur_slot", 1),
			(try_end),
			
			#tom
			#no failcheck for too many participents.
			(try_for_range, ":cur_troop", "trp_Xerina", "trp_tutorial_trainer"),
				(store_random_in_range, ":random_no", 0, 100),
				(lt, ":random_no", 25),
				(troop_set_slot, "trp_tournament_participants", ":cur_slot", ":cur_troop"),
				(val_add, ":cur_slot", 1),
			(try_end),
			#tom
			# (try_begin),
			# (store_random_in_range, ":random_no", 0, 100),
			# (lt, ":random_no", 50),
			# (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_xerina"),
			# (val_add, ":cur_slot", 1),
			# (try_end),
			# (try_begin),
			# (store_random_in_range, ":random_no", 0, 100),
			# (lt, ":random_no", 50),
			# (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_dranton"),
			# (val_add, ":cur_slot", 1),
			# (try_end),
			# (try_begin),
			# (store_random_in_range, ":random_no", 0, 100),
			# (lt, ":random_no", 50),
			# (troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_kradus"),
			# (val_add, ":cur_slot", 1),
			# (try_end),
			
			(store_faction_of_party, ":center_faction", ":center_no"),
			(call_script, "script_raf_aor_faction_to_region", ":center_faction"),
			
			(assign, ":begin_slot", ":cur_slot"),
			(try_for_range, ":cur_slot", ":begin_slot", 64),
				(store_random_in_range, ":random_no", 0, 3),
				(try_begin),
					(eq, ":random_no", 0),
					(try_begin),
						(eq, reg0, region_andalusian),
						(assign, ":participant", "trp_andalus_horse_4"),
					(else_try),
						(eq, reg0, region_north_african),
						(assign, ":participant", "trp_marinid_mounted_skirmisher_3"),
					(else_try),
						(eq, reg0, region_mamluk),
						(assign, ":participant", "trp_mamluke_heavy_horse_archer"),
					(else_try),
						(eq, reg0, region_baltic),
						(assign, ":participant", "trp_balt_noble_1"),
					(else_try),
						(eq, reg0, region_byzantine),
						(assign, ":participant", "trp_byz_castle_2"),
					(else_try),
						(eq, reg0, region_crusaders),
						(assign, ":participant", "trp_euro_horse_2"),
					(else_try),
						(eq, reg0, region_eastern),
						(assign, ":participant", "trp_rus_horse_2"),
					(else_try),
						(eq, reg0, region_european),
						(assign, ":participant", "trp_euro_horse_4"),
					(else_try),
						(eq, reg0, region_latin),
						(assign, ":participant", "trp_iberian_medium_cavalry"),
					(else_try),
						(eq, reg0, region_anatolian),
						(assign, ":participant", "trp_iberian_medium_cavalry"),
					(else_try),
						(eq, reg0, region_gaelic),
						(assign, ":participant", "trp_gaelic_knight"),
					(else_try),
						(eq, reg0, region_mongol),
						(assign, ":participant", "trp_tatar_veteran_horse_archer"),
					(else_try),
						(eq, reg0, region_nordic),
						(assign, ":participant", "trp_nordic_medium_cavalry"),
					(else_try),
						(eq, reg0, region_teutonic),
						(assign, ":participant", "trp_euro_horse_4"),
					(else_try),
						(assign, ":participant", "trp_euro_horse_4"),
					(try_end),
					(troop_set_slot, "trp_tournament_participants", ":cur_slot", ":participant"),
				(else_try),
					(eq, ":random_no", 1),
					(try_begin),
						(eq, reg0, region_andalusian),
						(assign, ":participant", "trp_andalus_horse_4"),
					(else_try),
						(eq, reg0, region_north_african),
						(assign, ":participant", "trp_marinid_mounted_skirmisher_3"),
					(else_try),
						(eq, reg0, region_mamluk),
						(assign, ":participant", "trp_mamluke_heavy_horse_archer"),
					(else_try),
						(eq, reg0, region_baltic),
						(assign, ":participant", "trp_balt_noble_2"),
					(else_try),
						(eq, reg0, region_byzantine),
						(assign, ":participant", "trp_byz_castle_3"),
					(else_try),
						(eq, reg0, region_crusaders),
						(assign, ":participant", "trp_euro_horse_4"),
					(else_try),
						(eq, reg0, region_eastern),
						(assign, ":participant", "trp_rus_horse_3"),
					(else_try),
						(eq, reg0, region_european),
						(assign, ":participant", "trp_euro_horse_4"),
					(else_try),
						(eq, reg0, region_latin),
						(assign, ":participant", "trp_iberian_squire"),
					(else_try),
						(eq, reg0, region_anatolian),
						(assign, ":participant", "trp_iberian_squire"),
					(else_try),
						(eq, reg0, region_gaelic),
						(assign, ":participant", "trp_gaelic_knight"),
					(else_try),
						(eq, reg0, region_mongol),
						(assign, ":participant", "trp_tatar_lancer"),
					(else_try),
						(eq, reg0, region_nordic),
						(assign, ":participant", "trp_nordic_squire"),
					(else_try),
						(eq, reg0, region_teutonic),
						(assign, ":participant", "trp_euro_horse_4"),
					(else_try),
						(assign, ":participant", "trp_euro_horse_4"),
					(try_end),
					(troop_set_slot, "trp_tournament_participants", ":cur_slot", ":participant"),
				(else_try),
					(eq, ":random_no", 2),
					(try_begin),
						(eq, reg0, region_andalusian),
						(assign, ":participant", "trp_andalus_horse_4"),
					(else_try),
						(eq, reg0, region_north_african),
						(assign, ":participant", "trp_marinid_lancer"),
					(else_try),
						(eq, reg0, region_mamluk),
						(assign, ":participant", "trp_mamluke_elite_horse_archer"),
					(else_try),
						(eq, reg0, region_baltic),
						(assign, ":participant", "trp_balt_noble_3"),
					(else_try),
						(eq, reg0, region_byzantine),
						(assign, ":participant", "trp_byz_castle_4"),
					(else_try),
						(eq, reg0, region_crusaders),
						(assign, ":participant", "trp_euro_horse_4"),
					(else_try),
						(eq, reg0, region_eastern),
						(assign, ":participant", "trp_rus_horse_4"),
					(else_try),
						(eq, reg0, region_anatolian),
						(assign, ":participant", "trp_rus_horse_4"),
					(else_try),
						(eq, reg0, region_european),
						(assign, ":participant", "trp_euro_horse_4"),
					(else_try),
						(eq, reg0, region_latin),
						(assign, ":participant", "trp_iberian_knight"),
					(else_try),
						(eq, reg0, region_gaelic),
						(assign, ":participant", "trp_gaelic_knight"),
					(else_try),
						(eq, reg0, region_mongol),
						(assign, ":participant", "trp_tatar_heavy_lancer"),
					(else_try),
						(eq, reg0, region_nordic),
						(assign, ":participant", "trp_nordic_knight"),
					(else_try),
						(eq, reg0, region_teutonic),
						(assign, ":participant", "trp_euro_horse_4"),
					(else_try),
						(assign, ":participant", "trp_euro_horse_4"),
					(try_end),
					(troop_set_slot, "trp_tournament_participants", ":cur_slot", ":participant"),
				(else_try),
					(troop_set_slot, "trp_tournament_participants", ":cur_slot", "trp_euro_horse_4"),
				(try_end),
			(try_end),
	])

# script_add_tournament_participant
		# Input: arg1 = troop_no
		# Output: none
add_tournament_participant = (
	"add_tournament_participant",
			[(store_script_param, ":troop_no", 1),
				(assign, ":continue", 1),
				(try_for_range, ":cur_slot", 0, 64),
					(eq, ":continue", 1),
					(troop_slot_eq, "trp_tournament_participants", ":cur_slot", -1),
					(troop_set_slot, "trp_tournament_participants", ":cur_slot", ":troop_no"),
					(assign, ":continue", 0),
				(try_end),
		])


		# script_sort_tournament_participant_troops
		# Input: none
		# Output: none (sorts trp_tournament_participants)
sort_tournament_participant_troops = (
	"sort_tournament_participant_troops",
			[(try_for_range, ":cur_slot", 0, 63),
					(store_add, ":cur_slot_2_begin", ":cur_slot", 1),
					(try_for_range, ":cur_slot_2", ":cur_slot_2_begin", 64),
						(troop_get_slot, ":troop_1", "trp_tournament_participants", ":cur_slot"),
						(troop_get_slot, ":troop_2", "trp_tournament_participants", ":cur_slot_2"),
						(call_script, "script_get_troop_priority_point_for_tournament", ":troop_1"),
						(assign, ":troop_1_point", reg0),
						(call_script, "script_get_troop_priority_point_for_tournament", ":troop_2"),
						(assign, ":troop_2_point", reg0),
						(gt, ":troop_2_point", ":troop_1_point"),
						(troop_set_slot, "trp_tournament_participants", ":cur_slot", ":troop_2"),
						(troop_set_slot, "trp_tournament_participants", ":cur_slot_2", ":troop_1"),
					(try_end),
				(try_end),
		])
		
		# script_remove_tournament_participants_randomly
		# Input: arg1 = number_to_be_removed
		# Output: none
remove_tournament_participants_randomly = (
	"remove_tournament_participants_randomly",
			[(store_script_param, ":number_to_be_removed", 1),
				(try_for_range, ":unused", 0, ":number_to_be_removed"),
					(assign, ":total_weight", 0),
					(try_for_range, ":cur_slot", 0, 64),
						(troop_get_slot, ":troop_no", "trp_tournament_participants", ":cur_slot"),
						(ge, ":troop_no", 0),
						(store_character_level, ":level", ":troop_no"),
						(val_min, ":level", 38),
						(store_sub, ":weight", 40, ":level"),
						(val_add, ":total_weight", ":weight"),
					(try_end),
					(store_random_in_range, ":random_weight", 0, ":total_weight"),
					(assign, ":continue", 1),
					(try_for_range, ":cur_slot", 0, 64),
						(eq, ":continue", 1),
						(troop_get_slot, ":troop_no", "trp_tournament_participants", ":cur_slot"),
						(ge, ":troop_no", 0),
						(store_character_level, ":level", ":troop_no"),
						(val_min, ":level", 38),
						(store_sub, ":weight", 40, ":level"),
						(val_sub, ":random_weight", ":weight"),
						(lt, ":random_weight", 0),
						(troop_set_slot, "trp_tournament_participants", ":cur_slot", -1),
						(assign, ":continue", 0),
					(try_end),
				(try_end),
		])
		
		# script_end_tournament_fight
		# Input: arg1 = player_team_won (1 or 0)
		# Output: none
end_tournament_fight = (
	"end_tournament_fight",
			[(store_script_param, ":player_team_won", 1),
				(call_script, "script_get_num_tournament_participants"),
				(assign, ":num_participants", reg0),
				(store_div, ":needed_to_remove_randomly", ":num_participants", 2),
				#Must remove other participants randomly earlier than adding the winners back to participants
				(call_script, "script_remove_tournament_participants_randomly", ":needed_to_remove_randomly"),
				
				(assign, ":num_needed", "$g_tournament_num_participants_for_fight"),
				(val_div, ":num_needed", 2),
				(get_player_agent_no, ":player_agent"),
				(agent_get_team, ":player_team", ":player_agent"),
				(try_for_agents, ":agent_no"),
					(agent_is_human, ":agent_no"),
					(agent_get_troop_id, ":troop_id", ":agent_no"),
					(neg|is_between, ":troop_id", arena_masters_begin, arena_masters_end),#omit tournament master
					(agent_get_team, ":agent_team", ":agent_no"),
					(assign, ":cur_point", 0),
					(try_begin),
						(eq, ":player_team_won", 1),
						(eq, ":agent_team", ":player_team"),
						(val_add, ":cur_point", 5000000),#Make sure that team members are chosen
					(try_end),
					(agent_get_kill_count, ":kill_count", ":agent_no", 1), #everyone is knocked unconscious
					(store_mul, ":kill_point", ":kill_count", 160000),#Make sure that kill count is the second most important variable
					(val_add, ":cur_point", ":kill_point"),
					(call_script, "script_get_troop_priority_point_for_tournament", ":troop_id"),
					(val_add, ":cur_point", reg0),
					(try_begin),#reset player's point if kill count is one after the first 2 rounds, or if it is zero
						(eq, ":agent_no", ":player_agent"),
						(eq, ":player_team_won", 0),
						(assign, ":not_passed", 1),
						(try_begin),
							(ge, ":kill_count", 2),
							(assign, ":not_passed", 0),
						(else_try),
							(eq, ":kill_count", 1),
							(le, "$g_tournament_cur_tier", 1),
							(assign, ":not_passed", 0),
						(try_end),
						(eq, ":not_passed", 1),
						(assign, ":cur_point", 0),
					(try_end),
					(agent_set_slot, ":agent_no", slot_agent_tournament_point, ":cur_point"),
				(try_end),
				(try_for_range, ":unused", 0, ":num_needed"),
					(assign, ":best_point", 0),
					(assign, ":best_agent_no", -1),
					(try_for_agents, ":agent_no"),
						(agent_is_human, ":agent_no"),
						(agent_get_slot, ":point", ":agent_no", slot_agent_tournament_point),
						(gt, ":point", ":best_point"),
						(assign, ":best_agent_no", ":agent_no"),
						(assign, ":best_point", ":point"),
					(try_end),
					(agent_set_slot, ":best_agent_no", slot_agent_tournament_point, 0),#Do not select the same agent again
					(agent_get_troop_id, ":troop_id", ":best_agent_no"),
					(call_script, "script_add_tournament_participant", ":troop_id"),
				(try_end),
				(assign, "$g_tournament_player_team_won", ":player_team_won"),
				(jump_to_menu, "mnu_town_tournament"),
		])
		
		
		# script_tournament_place_bet
		# Input: arg1 = bet_amount
		# Output: none
tournament_place_bet = (
	"tournament_place_bet",
			[
				(store_script_param, ":bet_amount", 1),
				(call_script, "script_get_win_amount_for_tournament_bet"),
				(assign, ":win_amount", reg0),
				(val_mul, ":win_amount", ":bet_amount"),
				(val_div, ":win_amount", 100),
				(val_sub, ":win_amount", ":bet_amount"),
				(val_add, "$g_tournament_bet_placed", ":bet_amount"),
				(val_add, "$g_tournament_bet_win_amount", ":win_amount"),
				(troop_remove_gold, "trp_player", ":bet_amount"),
				(assign, "$g_tournament_last_bet_tier", "$g_tournament_cur_tier"),
		])
		